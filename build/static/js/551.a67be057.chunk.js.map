{"version":3,"file":"static/js/551.a67be057.chunk.js","mappings":"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","sources":["pages/RedditAnalysis.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport \"./css/RedditAnalysis.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faReddit } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { AuthContext } from '../context/AuthContext';\nimport { useLocation } from 'react-router-dom';\nimport Loading from './Loading';\n\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst RedditAnalysis = () => {\n  const [input, setInput] = useState('');\n  const [comments, setComments] = useState([]);\n  const [postData, setPostData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showChart, setShowChart] = useState(false);\n  const location = useLocation();\n\n  const { token, logout,host } = useContext(AuthContext);\n\n  // Fetch comments data from the API\n  const fetchComments = async (urlToAnalyze) => {\n    if (!token) {\n      setError(\"Please log in to continue.\");\n      logout();\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(`${host}/fetch-reddit-comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ url: urlToAnalyze })\n      });\n\n      if (response.status === 401) {\n        setError(\"Session expired. Please log in again.\");\n        // logout();\n        return;\n      }\n\n      if (response.status === 404) {\n        setError(\"Reddit post not found. Please check the URL.\");\n        return;\n      }\n\n      if (!response.ok) throw new Error(\"Failed to fetch data\");\n\n      const data = await response.json();\n\n      if (data.message === \"Analysis already exists\") {\n        setPostData(data.analysis_data.post);\n        setComments(data.analysis_data.comments || []);\n      } else {\n        setPostData(data.post);\n        setComments(data.comments || []);\n      }\n    } catch (err) {\n      setError(\"Failed to fetch data. Please check the URL and try again.\");\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto-fetch Reddit data if navigated with a URL\n  useEffect(() => {\n    const stateUrl = location.state?.postId; // Extract Reddit URL from navigation state\n    if (stateUrl) {\n      setInput(stateUrl); // Update input field for UI\n      fetchComments(stateUrl); // Fetch data automatically\n    }\n    // eslint-disable-next-line\n  }, [location.state]);\n\n  // Handle Enter key press to trigger fetchComments\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      fetchComments(input);\n    }\n  };\n\n  // Handle input focus to select text\n  const handleFocus = () => document.getElementById('reddit-url').select();\n\n  // Process sentiment counts\n  const getSentimentCounts = () => {\n    let positiveCount = 0, neutralCount = 0, negativeCount = 0;\n    if (comments.length) {\n      comments.forEach(comment => {\n        if (comment.sentiment === 'positive') positiveCount++;\n        else if (comment.sentiment === 'neutral') neutralCount++;\n        else if (comment.sentiment === 'negative') negativeCount++;\n      });\n    }\n    return { positiveCount, neutralCount, negativeCount };\n  };\n\n  const { positiveCount, neutralCount, negativeCount } = getSentimentCounts();\n\n  const data = {\n    labels: ['Positive', 'Neutral', 'Negative'],\n    datasets: [\n      {\n        label: 'Sentiment Distribution',\n        data: [positiveCount, neutralCount, negativeCount],\n        backgroundColor: ['#28a745', '#6c757d', '#dc3545'],\n        borderColor: ['#28a745', '#6c757d', '#dc3545'],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"reddit-analysis main-content\">\n      <h2><FontAwesomeIcon icon={faReddit} className=\"service-icon\" /> Reddit Comment Analysis</h2>\n      <p>Analyze the sentiment of comments on Reddit posts to better understand user opinions.</p>\n      <div className=\"search-bar\">\n        <input\n          id=\"reddit-url\"\n          type=\"text\"\n          placeholder=\"Enter Reddit post link\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={handleKeyPress}\n          onFocus={handleFocus}\n        />\n        <button onClick={() => fetchComments(input)} disabled={loading} className='btn'>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n      </div>\n      {error && <p className=\"error-message\">{error}</p>}\n      {loading && <Loading/>}\n\n      {postData && (\n        <div className=\"post-embed\">\n          <h3>{postData.title}</h3>\n          <p><strong>Author:</strong> {postData.author || \"Author not available\"}</p>\n          <p><strong>Content:</strong> {postData.content || \"No content available\"}</p>\n          <a href={postData.url} target=\"_blank\" rel=\"noreferrer\" className=\"view-post-link\">\n            View Post\n          </a>\n          {postData.url && postData.url.match(/\\.(jpeg|jpg|gif|png)$/) && (\n            <img src={postData.url} alt=\"Reddit post\" className=\"reddit-image\" />\n          )}\n        </div>\n      )}\n\n      {comments.length > 0 && (\n        <>\n          <div className=\"sentiment-counts\">\n            <h3>Sentiment Breakdown</h3>\n            <p><strong>Positive:</strong> {positiveCount}</p>\n            <p><strong>Neutral:</strong> {neutralCount}</p>\n            <p><strong>Negative:</strong> {negativeCount}</p>\n          </div>\n          <button className=\"toggle-chart-btn\" onClick={() => setShowChart(!showChart)}>\n            {showChart ? \"Hide Chart\" : \"Show Chart\"}\n          </button>\n          {showChart && (\n            <div className=\"chart-container\">\n              <Bar data={data} />\n            </div>\n          )}\n        </>\n      )}\n\n      {comments.length > 0 && (\n        <div className=\"comments\">\n          <h2>Comments</h2>\n          <ul>\n            {comments.map((comment, index) => (\n              <li key={index} className=\"comment-card\">\n                <h4>\n                  {comment.sentiment === \"positive\" && \"😊\"}\n                  {comment.sentiment === \"neutral\" && \"😐\"}\n                  {comment.sentiment === \"negative\" && \"😠\"}\n                  {` ${comment.user || \"Anonymous\"}`}\n                </h4>\n                <div className={`sentiment-label ${comment.sentiment}`}>\n                  {comment.sentiment}\n                </div>\n                <p>{comment.text}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RedditAnalysis;\n"],"names":["Chart","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","RedditAnalysis","input","setInput","useState","comments","setComments","postData","setPostData","error","setError","loading","setLoading","showChart","setShowChart","location","useLocation","token","logout","host","useContext","AuthContext","fetchComments","async","response","fetch","concat","method","headers","body","JSON","stringify","url","urlToAnalyze","status","ok","Error","data","json","message","analysis_data","post","err","console","useEffect","_location$state","stateUrl","state","postId","positiveCount","neutralCount","negativeCount","getSentimentCounts","length","forEach","comment","sentiment","labels","datasets","label","backgroundColor","borderColor","borderWidth","_jsxs","className","children","_jsx","FontAwesomeIcon","icon","faReddit","id","type","placeholder","value","onChange","e","target","onKeyDown","key","preventDefault","onFocus","handleFocus","document","getElementById","select","onClick","disabled","faSearch","Loading","title","author","content","href","rel","match","src","alt","_Fragment","Bar","map","index","user","text"],"sourceRoot":""}