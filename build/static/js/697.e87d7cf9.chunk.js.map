{"version":3,"file":"static/js/697.e87d7cf9.chunk.js","mappings":"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","sources":["pages/Signup.js"],"sourcesContent":["import React, { useState,useContext,useEffect } from 'react';\nimport { useNavigate,useLocation } from 'react-router-dom';\nimport './css/Signup.css';\nimport Loading from './Loading'; // Import the Loading component\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport { useToast } from '../context/ToastContext'; // Importing the toast context\nimport { useGoogleLogin } from '@react-oauth/google'; // Assuming you're using react-oauth/google package for Google login\nimport {AuthContext} from '../context/AuthContext';\nimport googleimg from \"../img/google.png\"\n\n\n\nconst Signup = () => {\n  const [formData, setFormData] = useState({ username: '', email: '', password: '', confirmPassword: '' });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n  const [showPassword, setShowPassword] = useState(false); // State for showing/hiding password\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false); // State for showing/hiding confirm password\n  const [passwordError, setPasswordError] = useState('');\n  const [passwordMatchError, setPasswordMatchError] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const navigate = useNavigate();\n  const { showToast } = useToast(); // Using the toast context\n  const { login,host } = useContext(AuthContext); \n  const location = useLocation();\n  const { codeResponse } = location.state || {};  // Getting the token passed from login\n\n\n  // Password validation regex\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{8,}$/;\n  \n  // Email validation regex for Gmail\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n\n    if (name === 'password') {\n      // Password strength validation\n      if (!passwordRegex.test(value)) {\n        setPasswordError('Password must be at least 8 characters, including a number and a special character.');\n      } else {\n        setPasswordError('');\n      }\n\n      // Check if passwords match\n      if (value !== formData.confirmPassword) {\n        setPasswordMatchError('Passwords do not match.');\n      } else {\n        setPasswordMatchError('');\n      }\n    }\n\n    if (name === 'confirmPassword') {\n      // Check if passwords match\n      if (value !== formData.password) {\n        setPasswordMatchError('Passwords do not match.');\n      } else {\n        setPasswordMatchError('');\n      }\n    }\n\n    if (name === 'email') {\n      // Email validation for Gmail addresses\n      if (!emailRegex.test(value)) {\n        setEmailError('Please enter a valid Gmail address.');\n      } else {\n        setEmailError('');\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Validate fields\n    if (!formData.username || !formData.email || !formData.password || !formData.confirmPassword) {\n      setError('All fields are required.');\n      return;\n    }\n\n    if (passwordError || passwordMatchError || emailError) {\n      setError('Please fix the errors above.');\n      return;\n    }\n\n    setIsLoading(true); // Show loading spinner before making requests\n\n    try {\n      // First, check if the username or email already exists\n      const checkResponse = await fetch(`${host}/check-user`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username: formData.username, email: formData.email }),\n      });\n\n      const checkData = await checkResponse.json();\n      if (checkData.error) {\n        setError(checkData.error);\n        setIsLoading(false); // Hide loading spinner\n        return;\n      }\n\n      // Send a POST request to the backend to register the user\n      const response = await fetch(`${host}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        // Store user data in localStorage after successful signup\n        const userData = { username: formData.username, email: formData.email, password: formData.password }; // Modify according to your user data\n        localStorage.setItem('user', JSON.stringify(userData));\n\n        // Show success toast\n        showToast('Sign up successful! Please log in.', 'success');\n\n        // Navigate to login page\n        navigate('/login');\n      } else {\n        // Handle registration error\n        const data = await response.json();\n        setError(data.detail || 'Registration failed');\n        showToast(data.detail || 'Registration failed', 'error'); // Show error toast\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setError('Failed to register, please try again.');\n      showToast('Failed to register, please try again.', 'error'); // Show error toast\n    } finally {\n      setIsLoading(false); // Hide loading spinner\n    }\n  };\n\n\n  const handleGoogleSignup = async (tokenResponse) => {\n    try {\n      const googleSignupData = {\n        token: tokenResponse.access_token,\n      };\n\n      const response = await fetch(`${host}/google-signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(googleSignupData),\n      });\n\n      const data = await response.json();\n\n      // Check for a 404 error (user not found)\n      if (response.status === 500) {\n        showToast(\"Google User already exist. Redirecting to Login page...\", \"warning\");\n        navigate(\"/login\"); // Redirect to signup page\n        return;\n      }\n\n\n\n      if (response.ok) {\n        // Store the JWT token in localStorage (or sessionStorage)\n        login(data.access_token)\n        localStorage.setItem(\"user\", data.user_info);\n        showToast(data.message, 'success');\n        navigate('/profile');  // Or navigate to any authenticated page\n      } else {\n        showToast(data.detail || 'Google signup failed', 'error');\n      }\n    } catch (error) {\n      console.error('Google signup failed:', error);\n      showToast('Failed to sign up with Google', 'error');\n    }\n  };\n\n  const googleLogin = useGoogleLogin({\n    onSuccess: handleGoogleSignup,\n    onError: (error) => {\n      console.error('Google Login Failed:', error);\n      showToast('Google login failed. Please try again.', 'error');\n    },\n  });\n\n\n  useEffect(() => {\n    if (codeResponse) {\n      handleGoogleSignup(codeResponse);  // Automatically trigger signup\n    }\n    // eslint-disable-next-line\n  }, [codeResponse]);\n\n  return (\n    <div className=\"signup-container\">\n      <h2>Sign Up</h2>\n      {isLoading ? (\n        <Loading /> // Show loading spinner while processing\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label>Username:</label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n          <div>\n            <label>Email:</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              required\n            />\n            {emailError && <p className=\"error-message\">{emailError}</p>}\n          </div>\n          <div>\n            <label>Password:</label>\n            <div className=\"password-container\">\n              <input\n                type={showPassword ? \"text\" : \"password\"} // Toggle between text and password input type\n                name=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                required\n              />\n              <span \n                className=\"password-toggle-icon\"\n                onClick={() => setShowPassword(!showPassword)} // Toggle the password visibility\n              >\n                {showPassword ? <FontAwesomeIcon icon={faEyeSlash} /> : <FontAwesomeIcon icon={faEye} />} {/* Show eye icon depending on the state */}\n              </span>\n            </div>\n            {passwordError && <p className=\"error-message\">{passwordError}</p>}\n          </div>\n\n          <div>\n            <label>Confirm Password:</label>\n            <div className=\"password-container\">\n              <input\n                type={showConfirmPassword ? \"text\" : \"password\"} // Toggle between text and password input type\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                required\n              />\n              <span \n                className=\"password-toggle-icon\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)} // Toggle the password visibility\n              >\n                {showConfirmPassword ? <FontAwesomeIcon icon={faEyeSlash} /> : <FontAwesomeIcon icon={faEye} />} {/* Show eye icon depending on the state */}\n              </span>\n            </div>\n            {passwordMatchError && <p className=\"error-message\">{passwordMatchError}</p>}\n          </div>\n\n          {error && <p className=\"error-message\">{error}</p>}\n          <button className=\"signup-button\" type=\"submit\">Sign Up</button>\n        </form>\n      )}\n            <div className='google-btn-container'>\n          <button className=\"button-google\" onClick={googleLogin}>\n              <img src={googleimg} alt=\"Google Icon\" className=\"google-icon\" />\n              Login with Google\n          </button>\n      </div>\n      <p>\n        Already have an account?{' '}\n        <span className=\"login-button\" onClick={() => navigate('/login')}>Login</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Signup;\n"],"names":["Signup","formData","setFormData","useState","username","email","password","confirmPassword","error","setError","isLoading","setIsLoading","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","passwordError","setPasswordError","passwordMatchError","setPasswordMatchError","emailError","setEmailError","navigate","useNavigate","showToast","useToast","login","host","useContext","AuthContext","location","useLocation","codeResponse","state","passwordRegex","emailRegex","handleInputChange","e","name","value","target","_objectSpread","test","handleGoogleSignup","async","googleSignupData","token","tokenResponse","access_token","response","fetch","concat","method","headers","body","JSON","stringify","data","json","status","ok","localStorage","setItem","user_info","message","detail","console","googleLogin","useGoogleLogin","onSuccess","onError","useEffect","_jsxs","className","children","_jsx","Loading","onSubmit","preventDefault","checkResponse","checkData","userData","type","onChange","required","onClick","FontAwesomeIcon","icon","faEyeSlash","faEye","src","googleimg","alt"],"sourceRoot":""}