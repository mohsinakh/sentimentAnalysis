{"version":3,"file":"static/js/628.8bf9ae23.chunk.js","mappings":"iMAuGA,QAlGA,WACE,MAAM,MAAEA,EAAK,OAACC,EAAM,KAACC,IAASC,EAAAA,EAAAA,YAAWC,EAAAA,IACnC,MAAEC,IAAUC,EAAAA,EAAAA,MACZC,EAAoB,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,cACrBC,EAAMC,IAAWC,EAAAA,EAAAA,UAASH,GAAgB,KAC1CI,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,IAG7BO,GAAgBC,EAAAA,EAAAA,cAAYC,UAChC,IAAKnB,EAGH,OAFAC,SACAe,EAAS,+CAIXF,GAAW,GACXE,EAAS,IACTJ,EAAa,IAEb,IACE,MAAMQ,QAAiBC,MAAM,GAADC,OAAIpB,EAAI,sBAAsB,CACxDqB,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADH,OAAYtB,IAE3B0B,KAAMC,KAAKC,UAAU,CAAEpB,WAOzB,GAJuB,MAApBY,EAASS,QACV5B,KAGGmB,EAASU,GACZ,MAAM,IAAIC,MAAM,+BAGlB,MAAMC,QAAaZ,EAASa,OAC5BrB,EAAaoB,EAAKrB,UACpB,CAAE,MAAOI,GACPC,EAAS,+CACX,CAAC,QACCF,GAAW,EACb,IACC,CAACd,EAAOQ,EAAMP,EAAOC,IAkBxB,OAPAgC,EAAAA,EAAAA,YAAU,KACJ3B,IACFE,EAAQF,GACRU,IACF,GACC,CAACV,EAAcU,KAGhBkB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kCACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qDAEHF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,YACEC,YAAY,yBACZC,MAAOhC,EACPiC,SAAWC,GAAMjC,EAAQiC,EAAEC,OAAOH,OAClCI,UAzBgBF,IACR,UAAVA,EAAEG,MACJH,EAAEI,iBACF7B,IACF,EAsBMmB,UAAU,qBAEZE,EAAAA,EAAAA,KAAA,UACES,QAAS9B,EACTmB,UAAU,iBACVY,SAAUnC,IAAYL,EAAKyC,OAAQZ,SAElCxB,EAAU,eAAiB,yBAI/BE,IAASuB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAEtB,IAC/BJ,IACC2B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,eACUC,EAAAA,EAAAA,KAAA,UAAAD,SAAS1B,WAMhC,C","sources":["pages/RealTimeSentimentAnalysis.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport './css/RealTimeSentimentAnalysis.css';\nimport { AuthContext } from '../context/AuthContext';\nimport { useLocation } from 'react-router-dom';\n\nfunction RealTimeSentimentAnalysis() {\n  const { token,logout,host } = useContext(AuthContext);\n  const { state } = useLocation(); // Get the passed data from navigate\n  const analysisData = state?.analysisData; // This contains the text for sentiment analysis\n  const [text, setText] = useState(analysisData || \"\"); // Use the passed text or default to empty\n  const [sentiment, setSentiment] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // Stable definition of handleAnalyze using useCallback\n  const handleAnalyze = useCallback(async () => {\n    if (!token) {\n      logout();\n      setError(\"You must be logged in to analyze sentiment.\");\n      return;\n    }\n\n    setLoading(true);\n    setError(\"\");\n    setSentiment(\"\");\n\n    try {\n      const response = await fetch(`${host}/analyze-sentiment`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`, // Include the token in the Authorization header\n        },\n        body: JSON.stringify({ text }),\n      });\n\n      if(response.status === 401){\n        logout();\n      }\n\n      if (!response.ok) {\n        throw new Error(\"Failed to analyze sentiment\");\n      }\n\n      const data = await response.json();\n      setSentiment(data.sentiment);\n    } catch (error) {\n      setError(\"Error analyzing sentiment. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [token, text ,logout,host]); // Dependencies: token and text\n\n  // Handle Enter key press to trigger the analysis\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault(); // Prevent the newline from being added\n      handleAnalyze();\n    }\n  };\n\n  // UseEffect to re-trigger the analysis after navigation\n  useEffect(() => {\n    if (analysisData) {\n      setText(analysisData); // Update the text with passed data when available\n      handleAnalyze(); // Automatically analyze the sentiment after receiving the text\n    }\n  }, [analysisData, handleAnalyze]); // Dependencies: analysisData and handleAnalyze\n\n  return (\n    <div className=\"sentiment-page\">\n      <h1>Real-Time Sentiment Analysis</h1>\n      <p>Enter your text below to analyze its sentiment:</p>\n\n      <div className=\"input-container\">\n        <textarea\n          placeholder=\"Type your text here...\"\n          value={text}\n          onChange={(e) => setText(e.target.value)} // Only updates the text state, no auto-analysis\n          onKeyDown={handleKeyPress} // Trigger analysis when Enter key is pressed\n          className=\"sentiment-input\"\n        ></textarea>\n        <button\n          onClick={handleAnalyze}\n          className=\"analyze-button\"\n          disabled={loading || !text.trim()} // Disable the button if loading or text is empty\n        >\n          {loading ? \"Analyzing...\" : \"Analyze Sentiment\"}\n        </button>\n      </div>\n\n      {error && <p className=\"error\">{error}</p>}\n      {sentiment && (\n        <div className=\"sentiment-result\">\n          <p>\n            Sentiment: <strong>{sentiment}</strong>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RealTimeSentimentAnalysis;\n"],"names":["token","logout","host","useContext","AuthContext","state","useLocation","analysisData","text","setText","useState","sentiment","setSentiment","loading","setLoading","error","setError","handleAnalyze","useCallback","async","response","fetch","concat","method","headers","Authorization","body","JSON","stringify","status","ok","Error","data","json","useEffect","_jsxs","className","children","_jsx","placeholder","value","onChange","e","target","onKeyDown","key","preventDefault","onClick","disabled","trim"],"sourceRoot":""}