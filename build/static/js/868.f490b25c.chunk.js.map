{"version":3,"file":"static/js/868.f490b25c.chunk.js","mappings":"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","sources":["pages/Profile.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport './css/Profile.css'; // Importing the CSS file\nimport { faEnvelope, faSmile, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faReddit, faYoutube } from '@fortawesome/free-brands-svg-icons';\nimport { useToast } from '../context/ToastContext'; // Importing toast context\nimport Loading from './Loading'; // Import the Loading component\n\nconst Profile = () => {\n  const { token,host } = useContext(AuthContext);\n  const [user, setUser] = useState(null);\n  const [history, setHistory] = useState([]);\n  const [loadingHistory, setLoadingHistory] = useState(true); // State for tracking loading status of history\n  const navigate = useNavigate();\n  const { showToast } = useToast(); \n  \n\n  const fetchHistory = useCallback(async (username) => {\n    if(token){\n    try {\n      const response = await fetch(`${host}/analysis-history`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        setLoadingHistory(false);\n        return;\n      }\n\n      const data = await response.json();\n      setHistory(data.history || []);\n      setLoadingHistory(false); // Set loadingHistory to false once data is fetched\n\n      showToast('Analysis history loaded successfully!', 'success');\n    } catch (error) {\n      console.error('Error fetching analysis history:', error);\n      setLoadingHistory(false); // Ensure loading is stopped even in case of error\n      showToast('An error occurred while loading the history.', 'error');\n    }\n  }\n    // eslint-disable-next-line\n  }, [token ]);\n\n  useEffect(() => {\n    const fetchedUser = JSON.parse(localStorage.getItem('user')) || null;\n    if (fetchedUser) {\n      setUser(fetchedUser);\n      fetchHistory(fetchedUser.username);\n    }\n  }, [fetchHistory]);\n\n  const sentimentHistory = history.filter(item => item.analysis_type === 'sentiment');\n  const youtubeHistory = history.filter(item => item.analysis_type === 'youtube');\n  const redditHistory = history.filter(item => item.analysis_type === 'reddit');\n\n  // Handle re-analysis for individual items\n  const handleReanalyzeSentiment = (item) => {\n    showToast('Re-analyzing sentiment...', 'info');\n    navigate('/realtime-sentiment-analysis', { state: { analysisData: item.analysis_data.text } });\n  };\n\n  const handleReanalyzeYouTube = (item) => {\n    showToast('Re-analyzing YouTube video...', 'info'); \n    navigate('/youtube-analysis', { state: { videoUrl: `https://youtu.be/${item.analysis_data.video_id}`} });\n  };\n\n  const handleReanalyzeReddit = (item) => {\n    showToast('Re-analyzing Reddit post...', 'info');\n    navigate('/reddit-analysis', { state:  { postId:`https://reddit/comments/${item.analysis_data.post_id}` } });\n  };\n \n  return (\n    <div className=\"profile-page\">\n      <h2 className=\"profile-header\">Profile Page</h2>\n      {user ? (\n        <div className=\"profile-details\">\n          <p><FontAwesomeIcon icon={faUser} /><strong> Username:</strong> {user.username }</p>\n          <p><FontAwesomeIcon icon={faEnvelope} /><strong> Email:</strong> {user.email}</p>\n\n          <div className=\"history-section\">\n            <h3>Analysis History</h3>\n            {loadingHistory ? (\n              <Loading /> // Show loading spinner while history is being fetched\n            ) : (\n              <div className=\"history-category-container\">\n                {sentimentHistory.length > 0 && (\n                  <div className=\"history-category sentiment\">\n                    <h4><FontAwesomeIcon icon={faSmile} /> Sentiment Analysis</h4>\n                    <div className=\"analysis-content\">\n                      {sentimentHistory.map((item, index) => (\n                        <div key={index} className=\"history-item\">\n                          <p><strong>Date:</strong> {new Date(item.timestamp).toLocaleString()}</p>\n                          <p><strong>Text:</strong> {item.analysis_data.text}</p>\n                          <p><strong>Sentiment:</strong> {item.analysis_data.sentiment}</p>\n                          <button onClick={() => handleReanalyzeSentiment(item)} className='profile-btn'>Re-analyze Sentiment</button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {youtubeHistory.length > 0 && (\n                  <div className=\"history-category youtube\">\n                    <h4><FontAwesomeIcon icon={faYoutube} /> YouTube Analysis</h4>\n                    <div className=\"analysis-content\">\n                      {youtubeHistory.map((item, index) => (\n                        <div key={index} className=\"history-item\">\n                          <p><strong>Date:</strong> {new Date(item.timestamp).toLocaleString()}</p>\n                          <p><strong>Video URL:</strong> <a href={`https://www.youtube.com/embed/${item.analysis_data.video_id}`} target='_blank' rel='noreferrer' className='profile_link'>View Video</a></p>\n                          <p><strong>Video Title:</strong> {item.analysis_data.title}</p>\n                          <p><strong>Comments:</strong> {item.analysis_data.comments.length} comments</p>\n                          <div className=\"youtube-video\">\n                            <iframe\n                              width=\"100%\"\n                              height=\"315\"\n                              src={`https://www.youtube.com/embed/${item.analysis_data.video_id}`}\n                              frameBorder=\"0\"\n                              allowFullScreen\n                              title={item.analysis_data.title}\n                            ></iframe>\n                          </div>\n                          <button onClick={() => handleReanalyzeYouTube(item)} className='profile-btn'>Re-analyze YouTube</button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {redditHistory.length > 0 && (\n                  <div className=\"history-category reddit\">\n                    <h4><FontAwesomeIcon icon={faReddit} /> Reddit Analysis</h4>\n                    <div className=\"analysis-content\">\n                      {redditHistory.map((item, index) => (\n                        <div key={index} className=\"history-item\">\n                          <p><strong>Date:</strong> {new Date(item.timestamp).toLocaleString()}</p>\n                          <p><strong>Post URL:</strong> <a href={item.analysis_data.post.url} target='_blank' rel='noreferrer' className='profile_link'>View Post</a></p>\n                          <p><strong>Subreddit:</strong> {item.analysis_data.subreddit || \"No Subreddit Data\"}</p>\n                          <p><strong>Comments:</strong> {item.analysis_data.comments.length} comments</p>\n                          <div className=\"reddit-post\">\n                            {item.analysis_data.post.url ? (\n                              item.analysis_data.post.url.match(/\\.(jpeg|jpg|gif|png)$/) ? (\n                                <img\n                                  src={item.analysis_data.post.url}\n                                  alt=\"Reddit post\"\n                                  className=\"reddit-image\"\n                                />\n                              ) : null\n                            ) : null}\n                          </div>\n                          <button onClick={() => handleReanalyzeReddit(item)} className='profile-btn'>Re-analyze Reddit</button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {history.length === 0 && !loadingHistory && <p className=\"no-history\">No analysis history found.</p>}\n          </div>\n        </div>\n      ) : (\n        <p><Loading/></p>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"names":["Profile","token","host","useContext","AuthContext","user","setUser","useState","history","setHistory","loadingHistory","setLoadingHistory","navigate","useNavigate","showToast","useToast","fetchHistory","useCallback","async","response","fetch","concat","method","headers","ok","data","json","error","console","useEffect","fetchedUser","JSON","parse","localStorage","getItem","username","sentimentHistory","filter","item","analysis_type","youtubeHistory","redditHistory","_jsxs","className","children","_jsx","FontAwesomeIcon","icon","faUser","faEnvelope","email","Loading","length","faSmile","map","index","Date","timestamp","toLocaleString","analysis_data","text","sentiment","onClick","state","analysisData","handleReanalyzeSentiment","faYoutube","href","video_id","target","rel","title","comments","width","height","src","frameBorder","allowFullScreen","videoUrl","handleReanalyzeYouTube","faReddit","post","url","subreddit","match","alt","postId","post_id","handleReanalyzeReddit"],"sourceRoot":""}