{"version":3,"file":"static/js/121.a4985165.chunk.js","mappings":"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","sources":["pages/Login.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport \"./css/Login.css\";\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Loading from './Loading'; // Import the Loading component\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport { useToast } from '../context/ToastContext'; // Importing the toast context\nimport { useGoogleLogin } from '@react-oauth/google'; // Updated import\nimport googleimg from '../img/google.png'\n\nconst Login = () => {\n  const { login,host } = useContext(AuthContext); // Access login function from context\n  const [formData, setFormData] = useState({ credential: '', password: '' });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // Loading state\n  const [showPassword, setShowPassword] = useState(false); // State for showing/hiding password\n  const navigate = useNavigate();\n  const { showToast } = useToast(); // Using the toast context\n\n\n\n  \n  const googleLogin = useGoogleLogin({\n    onSuccess: async (codeResponse) => {\n      try {\n        console.log(\"Google Login Data:\", codeResponse); // Log Google data to console\n        console.log(host)\n        // Send token to the backend\n        const response = await fetch(`${host}/google-login`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ token: codeResponse.access_token }),\n        });\n  \n        const data = await response.json(); \n        const { access_token, user_info, message } = data;\n  \n        console.log(\"JWT Token:\", access_token);\n        console.log(\"User Info:\", user_info);\n  \n        if (response.ok) {\n          // Use login function from context to store token\n          login(access_token);\n  \n          // Save user info in localStorage\n          localStorage.setItem(\"user\", JSON.stringify(user_info));\n  \n          // Show success toast\n          showToast(`${message} Redirecting to profile...`, \"success\");\n  \n          // Redirect to profile or another page\n          navigate(\"/profile\");\n        } else if (response.status === 401) {\n          // If user not found, trigger signup\n          showToast(\"Google User does not exist. Signing up now...\", \"warning\");\n  \n          // Trigger signup request directly from here (as you're already in the login flow)\n          const signupResponse = await fetch(`${host}/google-signup`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ token: codeResponse.access_token }),\n          });\n  \n          const signupData = await signupResponse.json();\n          if (signupResponse.ok) {\n            // Use login function from context to store token\n            login(signupData.access_token);\n  \n            // Save user info in localStorage\n            localStorage.setItem(\"user\", JSON.stringify(signupData.user_info));\n  \n            // Show success toast\n            showToast('Signup successful', 'success');\n            navigate('/profile');\n          } else {\n            // Clear localStorage if signup failed\n            localStorage.removeItem(\"user\");\n  \n            showToast(signupData.detail || 'Signup failed', 'error');\n          }\n        } else {\n          // Handle other status codes or failures\n          showToast(message || 'Authentication failed', 'error');\n        }\n  \n      } catch (error) {\n        console.error(\"Google login failed:\", error);\n        showToast(\"Google login failed. Please try again.\", \"error\");\n      }\n    },\n    onError: (error) => {\n      console.error(\"Google Login Failed:\", error);\n      showToast(\"Google login failed. Please try again.\", \"error\");\n    },\n  });\n\n  \n\n\n  useEffect(() => {\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      const { email, username, password } = JSON.parse(savedUser);\n      // If there's no password (from Google login), generate a default or random password\n      if (!password) {\n        setFormData({ credential: email || username, password: 'default_google_password' }); // You can change 'randomPasswordSet' with something else if needed\n      } else {\n        setFormData({ credential: email || username, password });\n      }\n    }\n  }, []);\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true); // Show loading spinner\n\n    try {\n      const response = await fetch(`${host}/token`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Invalid username/email or password');\n      }\n\n      const data = await response.json();\n      console.log('Access Token:', data.access_token); // Debug\n      console.log('User Data:', data.user); // Debug\n\n      // Use login function from context to store token\n      login(data.access_token);\n\n      // Optionally, save the user data in localStorage as well\n      localStorage.setItem('user', JSON.stringify(data.user)); \n\n      // Show success toast\n      showToast('Login successful! Redirecting to profile...', 'success');\n\n      // Redirect to profile or another page\n      navigate('/profile');\n    } catch (err) {\n      console.error(err.message);\n      setError('Invalid username/email or password'); // Set error message\n      showToast('Login failed. Please check your credentials.', 'error'); // Show error toast\n    } finally {\n      setIsLoading(false); // Hide loading spinner\n    }\n  };\n\n  \n\n  \n\n  return (\n    <div className=\"login-container\">\n      <h2>Login</h2>\n      {isLoading ? (\n        <Loading /> // Show loading spinner while processing\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label>Username or Email:</label>\n            <input\n              type=\"text\"\n              name=\"credential\"\n              value={formData.credential}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n          <div>\n            <label>Password:</label>\n            <div className=\"password-container\">\n              <input\n                type={showPassword ? \"text\" : \"password\"} // Toggle between text and password input type\n                name=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                required\n              />\n              <span \n                className=\"password-toggle-icon\"\n                onClick={() => setShowPassword(!showPassword)} // Toggle the password visibility\n              >\n                {showPassword ? <FontAwesomeIcon icon={faEyeSlash} /> : <FontAwesomeIcon icon={faEye} />} {/* Show eye icon depending on the state */}\n              </span>\n            </div>\n          </div>\n          {error && <p className=\"error-message\">{error}</p>}\n          <button className='btn' type=\"submit\">Login</button>\n        </form>\n        \n      )}\n\n      <div className='google-btn-container'>\n          <button className=\"button-google\" onClick={googleLogin}>\n              <img src={googleimg} alt=\"Google Icon\" className=\"google-icon\" />\n              Login with Google\n          </button>\n      </div>\n\n      \n      <p>\n        Don't have an account?{' '}\n        <span className=\"signup-link\" onClick={() => navigate('/signup')}>\n          Sign Up\n        </span>\n      </p>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["Login","login","host","useContext","AuthContext","formData","setFormData","useState","credential","password","error","setError","isLoading","setIsLoading","showPassword","setShowPassword","navigate","useNavigate","showToast","useToast","googleLogin","useGoogleLogin","onSuccess","async","console","log","codeResponse","response","fetch","concat","method","headers","body","JSON","stringify","token","access_token","data","json","user_info","message","ok","localStorage","setItem","status","signupResponse","signupData","removeItem","detail","onError","useEffect","savedUser","getItem","email","username","parse","handleInputChange","e","name","value","target","_objectSpread","_jsxs","className","children","_jsx","Loading","onSubmit","preventDefault","Error","user","err","type","onChange","required","onClick","FontAwesomeIcon","icon","faEyeSlash","faEye","src","googleimg","alt"],"sourceRoot":""}