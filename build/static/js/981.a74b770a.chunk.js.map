{"version":3,"file":"static/js/981.a74b770a.chunk.js","mappings":"uOAWAA,EAAAA,GAAMC,SAASC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,GAAYC,EAAAA,GAAOC,EAAAA,GAASC,EAAAA,IA2MvE,QAzMA,WACE,MAAOC,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,KACxBC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,OAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAC5BO,EAAeC,IAAoBR,EAAAA,EAAAA,UAAS,IAC5CS,EAAcC,IAAmBV,EAAAA,EAAAA,UAAS,IAC1CW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,IAC5Ca,EAAWC,IAAgBd,EAAAA,EAAAA,WAAS,IACpCe,EAASC,IAAchB,EAAAA,EAAAA,WAAS,IACjC,MAAEiB,EAAK,OAAEC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GAC/BC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAOXC,GAAgBC,EAAAA,EAAAA,cAAYC,UAChCX,GAAW,GACXV,EAAS,IACTF,EAAY,IACZI,EAAiB,GACjBE,EAAgB,GAChBE,EAAiB,GAEjB,MAAMX,EAbgBH,KACtB,MAAM8B,EAAQ9B,EAAI8B,MAAM,gCACxB,OAAOA,EAAQA,EAAM,GAAK,IAAI,EAWdC,CAAeC,GAG/B,GAFA5B,EAAWD,IAENgB,EAIH,OAHAX,EAAS,8BACTY,SACAG,EAAS,UAIX,IACE,MAAMU,QAAiBC,MAAM,iEAAkE,CAC7FC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,UAADC,OAAYlB,IAE7BmB,KAAMC,KAAKC,UAAU,CAAExC,IAAKgC,MAG9B,GAAwB,MAApBC,EAASQ,OAIX,OAHAjC,EAAS,yCACTY,SACAG,EAAS,UAIX,IAAKU,EAASS,GACZ,MAAM,IAAIC,MAAM,4BAGlB,MAAMC,QAAaX,EAASY,OAC5BvC,EAAYsC,EAAKvC,UAGjB,IAAIyC,EAAW,EACXC,EAAW,EACXC,EAAW,EAEfJ,EAAKvC,SAAS4C,SAASC,IACK,aAAtBA,EAAQC,UAA0BL,IACP,YAAtBI,EAAQC,UAAyBJ,IACX,aAAtBG,EAAQC,WAA0BH,GAAU,IAGvDtC,EAAiBoC,GACjBlC,EAAgBmC,GAChBjC,EAAiBkC,GACjB9B,GAAW,EACb,CAAE,MAAOX,GACPC,EAAS,gEACTU,GAAW,EACb,IACC,CAACC,EAAOC,EAAQG,KAEnB6B,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQ5B,EAAS4B,MACd,OAALA,QAAK,IAALA,GAAAA,EAAOrB,WACT/B,EAAOoD,EAAMrB,UACbL,EAAc0B,EAAMrB,UACtB,GAEC,CAAEP,EAAS4B,QAEd,MAYMT,EAAO,CACXU,OAAQ,CAAC,WAAY,UAAW,YAChCC,SAAU,CACR,CACEC,MAAO,sBACPZ,KAAM,CAACnC,EAAeE,EAAcE,GACpC4C,gBAAiB,CAAC,UAAW,UAAW,WACxCC,YAAa,CAAC,UAAW,UAAW,WACpCC,YAAa,KAKnB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EAAIC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMC,EAAAA,MAAa,gCACxCN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SACEI,GAAG,cACHC,KAAK,OACLC,YAAY,0BACZC,MAAOtE,EACPuE,UAlCgBC,IACR,UAAVA,EAAEC,MACJD,EAAEE,iBACF/C,EAAc3B,GAChB,EA+BM2E,QA5BYC,KAClBC,SAASC,eAAe,eAAeC,QAAQ,EA4BzCC,SAAWR,GAAMvE,EAAOuE,EAAES,OAAOX,UAEnCP,EAAAA,EAAAA,KAAA,UAAQmB,QAASA,IAAMvD,EAAc3B,GAAM6D,UAAU,MAAKC,UACxDC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACC,KAAMkB,EAAAA,WAI1B5E,IAASwD,EAAAA,EAAAA,KAAA,KAAGqB,MAAO,CAAEC,MAAO,OAAQvB,SAAEvD,IAEtCJ,IACC4D,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAA,UACEuB,IAAG,iCAAAjD,OAAmClC,GACtCoF,MAAM,wBACNC,YAAY,IACZC,MAAM,2FACNC,iBAAe,MAKpBzE,IAAW8C,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAEdzD,EAASsF,OAAS,IACjB/B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAErD,MAC/BmD,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAAiB,IAAEnD,MAC9BiD,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAEjD,QAIlCR,EAASsF,OAAS,IACjB5B,EAAAA,EAAAA,KAAA,UACEF,UAAU,iBACVqB,QAASA,IAAMlE,GAAcD,GAAW+C,SAEvC/C,EAAY,aAAe,eAI/BA,GAAaV,EAASsF,OAAS,IAC9B5B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAG,CAAChD,KAAMA,MAIdvC,EAASsF,OAAS,IACjB/B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SACGzD,EAASwF,KAAI,CAAC3C,EAAS4C,KACtBlC,EAAAA,EAAAA,MAAA,MAAgBC,UAAU,eAAcC,SAAA,EACtCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACyB,aAAtBZ,EAAQC,WAA4B,eACd,YAAtBD,EAAQC,WAA2B,eACb,aAAtBD,EAAQC,WAA4B,eAAI,IAAAd,OACpCa,EAAQ6C,UAAY,iBAE3BnC,EAAAA,EAAAA,MAAA,OAAKC,UAAS,mBAAAxB,OAAqBa,EAAQC,WAAYW,SAAA,CAC9B,aAAtBZ,EAAQC,WAA4B,MACd,YAAtBD,EAAQC,WAA2B,MACb,aAAtBD,EAAQC,WAA4B,UAEvCY,EAAAA,EAAAA,KAAA,KAAAD,SAAIZ,EAAQ8C,SAZLF,YAoBvB,C","sources":["pages/YoutubeAnalysis.js"],"sourcesContent":["import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport \"./css/YoutubeAnalysis.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { AuthContext } from '../context/AuthContext';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\n// Register necessary components for your chart\nChart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction YoutubeAnalysis() {\n  const [url, setUrl] = useState(\"\");\n  const [videoId, setVideoId] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [positiveCount, setPositiveCount] = useState(0);\n  const [neutralCount, setNeutralCount] = useState(0);\n  const [negativeCount, setNegativeCount] = useState(0);\n  const [showChart, setShowChart] = useState(false); // State to toggle chart visibility\n  const [loading, setLoading] = useState(false);\n  const { token, logout } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const extractVideoId = (url) => {\n    const match = url.match(/(?:v=|\\/)([0-9A-Za-z_-]{11})/);\n    return match ? match[1] : null;\n  };\n\n  const fetchComments = useCallback(async (videoUrl) => {\n    setLoading(true);\n    setError(\"\");\n    setComments([]);\n    setPositiveCount(0);\n    setNeutralCount(0);\n    setNegativeCount(0);\n\n    const videoId = extractVideoId(videoUrl);\n    setVideoId(videoId);\n\n    if (!token) {\n      setError(\"Please log in to continue.\");\n      logout();\n      navigate(\"/login\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"https://sentiment-analysis-api-eight.vercel.app/fetch-comments\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`, // Include the JWT token here\n        },\n        body: JSON.stringify({ url: videoUrl }),\n      });\n\n      if (response.status === 401) {\n        setError(\"Session expired. Please log in again.\");\n        logout();\n        navigate('/login');\n        return;\n      }\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch comments\");\n      }\n\n      const data = await response.json();\n      setComments(data.comments);\n\n      // Calculate sentiment counts\n      let posCount = 0;\n      let neuCount = 0;\n      let negCount = 0;\n\n      data.comments.forEach((comment) => {\n        if (comment.sentiment === \"positive\") posCount++;\n        else if (comment.sentiment === \"neutral\") neuCount++;\n        else if (comment.sentiment === \"negative\") negCount++;\n      });\n\n      setPositiveCount(posCount);\n      setNeutralCount(neuCount);\n      setNegativeCount(negCount);\n      setLoading(false);\n    } catch (error) {\n      setError(\"Error fetching comments. Please check the URL and try again.\");\n      setLoading(false);\n    }\n  }, [token, logout, navigate]);\n\n  useEffect(() => {\n    const state = location.state;\n    if (state?.videoUrl) {\n      setUrl(state.videoUrl); // Automatically set the URL from the state\n      fetchComments(state.videoUrl); // Fetch comments immediately\n    }\n    // eslint-disable-next-line\n  }, [ location.state]); // Runs whenever the location state changes\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      fetchComments(url); // Trigger search when Enter key is pressed\n    }\n  };\n\n  const handleFocus = () => {\n    document.getElementById(\"youtube-url\").select(); // Select all text when input is focused\n  };\n\n  // Chart Data\n  const data = {\n    labels: ['Positive', 'Neutral', 'Negative'],\n    datasets: [\n      {\n        label: 'Sentiment Breakdown',\n        data: [positiveCount, neutralCount, negativeCount],\n        backgroundColor: ['#28a745', '#6c757d', '#dc3545'],\n        borderColor: ['#28a745', '#6c757d', '#dc3545'],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"youtube-comment-analysis\">\n      <h1><FontAwesomeIcon icon={faYoutube} /> YouTube Comment Analysis</h1>\n      <div className=\"search-bar\">\n        <input\n          id=\"youtube-url\"\n          type=\"text\"\n          placeholder=\"Enter YouTube video URL\"\n          value={url}\n          onKeyDown={handleKeyPress}\n          onFocus={handleFocus}\n          onChange={(e) => setUrl(e.target.value)}\n        />\n        <button onClick={() => fetchComments(url)} className='btn'>\n          <FontAwesomeIcon icon={faSearch} />\n        </button>\n      </div>\n\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n      {videoId && (\n        <div className=\"video-container\">\n          <iframe\n            src={`https://www.youtube.com/embed/${videoId}`}\n            title=\"YouTube video preview\"\n            frameBorder=\"0\"\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          ></iframe>\n        </div>\n      )}\n\n      {loading && <p>Loading comments...</p>}\n\n      {comments.length > 0 && (\n        <div className=\"sentiment-counts\">\n          <h3>Sentiment Breakdown</h3>\n          <p><strong>Positive:</strong> {positiveCount}</p>\n          <p><strong>Neutral:</strong> {neutralCount}</p>\n          <p><strong>Negative:</strong> {negativeCount}</p>\n        </div>\n      )}\n\n      {comments.length > 0 && (\n        <button\n          className=\"analyze-button\"\n          onClick={() => setShowChart(!showChart)}\n        >\n          {showChart ? \"Hide Chart\" : \"Show Chart\"}\n        </button>\n      )}\n\n      {showChart && comments.length > 0 && (\n        <div className=\"chart-container\">\n          <Bar data={data} />\n        </div>\n      )}\n\n      {comments.length > 0 && (\n        <div className=\"comments\">\n          <h2>Comments</h2>\n          <ul>\n            {comments.map((comment, index) => (\n              <li key={index} className=\"comment-card\">\n                <h4>\n                  {comment.sentiment === \"positive\" && \"😊\"}\n                  {comment.sentiment === \"neutral\" && \"😐\"}\n                  {comment.sentiment === \"negative\" && \"😠\"}\n                  {` ${comment.username || \"Anonymous\"}`}\n                </h4>\n                <div className={`sentiment-label ${comment.sentiment}`}>\n                  {comment.sentiment === \"positive\" && \"pos\"}\n                  {comment.sentiment === \"neutral\" && \"neu\"}\n                  {comment.sentiment === \"negative\" && \"neg\"}\n                </div>\n                <p>{comment.text}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default YoutubeAnalysis;\n"],"names":["Chart","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","url","setUrl","useState","videoId","setVideoId","comments","setComments","error","setError","positiveCount","setPositiveCount","neutralCount","setNeutralCount","negativeCount","setNegativeCount","showChart","setShowChart","loading","setLoading","token","logout","useContext","AuthContext","navigate","useNavigate","location","useLocation","fetchComments","useCallback","async","match","extractVideoId","videoUrl","response","fetch","method","headers","concat","body","JSON","stringify","status","ok","Error","data","json","posCount","neuCount","negCount","forEach","comment","sentiment","useEffect","state","labels","datasets","label","backgroundColor","borderColor","borderWidth","_jsxs","className","children","_jsx","FontAwesomeIcon","icon","faYoutube","id","type","placeholder","value","onKeyDown","e","key","preventDefault","onFocus","handleFocus","document","getElementById","select","onChange","target","onClick","faSearch","style","color","src","title","frameBorder","allow","allowFullScreen","length","Bar","map","index","username","text"],"sourceRoot":""}